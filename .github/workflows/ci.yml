name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x, 24.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npm run typecheck

    - name: Run linting
      run: npm run lint

    - name: Build project
      run: npm run build

    - name: Test connection (without actual Fronius device)
      run: |
        # Test server can start without crashing
        timeout 10s npm start || true

  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: docker build -t fronius-mcp-server .

    - name: Test Docker image
      run: |
        # Test that container can start and respond to --help
        docker run --rm fronius-mcp-server node dist/server.js --help

    - name: Login to Docker Hub
      if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract tag name
      if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
      run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Build and push Docker image
      if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/fronius-mcp-server:latest
          ${{ secrets.DOCKER_USERNAME }}/fronius-mcp-server:${{ env.TAG_NAME }}
        platforms: linux/amd64,linux/arm64

  release:
    name: Create Release Assets
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    needs: [test, docker]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Extract tag name
      run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Create release archive
      run: |
        # Create a clean release archive
        mkdir -p release/fronius-mcp-server
        cp -r dist/ release/fronius-mcp-server/
        cp package.json package-lock.json release/fronius-mcp-server/
        cp README.md LICENSE release/fronius-mcp-server/
        cp -r scripts/ release/fronius-mcp-server/ || true
        cp docker-compose.yml Dockerfile .dockerignore release/fronius-mcp-server/
        cd release
        tar -czf fronius-mcp-server-${{ env.TAG_NAME }}.tar.gz fronius-mcp-server/
        zip -r fronius-mcp-server-${{ env.TAG_NAME }}.zip fronius-mcp-server/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: Release ${{ env.TAG_NAME }}
        body: |
          ## Changes
          
          Release ${{ env.TAG_NAME }}
          
          ### Docker Image
          ```bash
          docker pull ${{ secrets.DOCKER_USERNAME }}/fronius-mcp-server:${{ env.TAG_NAME }}
          docker pull ${{ secrets.DOCKER_USERNAME }}/fronius-mcp-server:latest
          ```
          
          See [README.md](https://github.com/huber/fronius-mcp-server#readme) for setup instructions.
        files: |
          release/fronius-mcp-server-${{ env.TAG_NAME }}.tar.gz
          release/fronius-mcp-server-${{ env.TAG_NAME }}.zip
        draft: false
        prerelease: false